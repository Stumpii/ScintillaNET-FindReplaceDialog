name: .NET Core Desktop
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    environment: NuGet

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: ScintillaNET FindReplaceDialog.sln
      Project_1: ScintillaNet_FindReplaceDialog/ScintillaNET_FindReplaceDialog.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Build the project 
      run: msbuild $env:Project_1 /p:Configuration=$env:Configuration

    - name: Decode nuget.config
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $nuget_config_bytes = [System.Convert]::FromBase64String("${{ secrets.NUGETCONFIG }}")
        $currentDirectory = Get-Location
        $nugetConfigFile = Join-Path -Path $currentDirectory -ChildPath "nuget.config"        
        [IO.File]::WriteAllBytes("$nugetConfigFile", $nuget_config_bytes)
    - name: NuGet push
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $currentDirectory = Get-Location
        $files = Get-ChildItem $currentDirectory -r -Filter *ScintillaNET_FindReplaceDialog*.nupkg # use the mask to discard possible third party packages..
        for ($i = 0; $i -lt $files.Count; $i++) 
        { 
            $file = $files[$i].FullName
            
            $arguments = @("push", $file, "${{ secrets.NUGET_APIKEY }}", "-Source", "${{ secrets.NUGETAPI }}", "-SkipDuplicate")
            
            # sign the NuGet packages.
            Write-Output (-join("Pushing NuGet:", $file, " ..."))
            nuget.exe $arguments
            
            $arguments = @("push", $file, "${{ secrets.GH_PACKAGES_APIKEY }}", "-Source", "${{ secrets.PACKAGESAPI }}", "-SkipDuplicate")
            nuget.exe $arguments
        }
